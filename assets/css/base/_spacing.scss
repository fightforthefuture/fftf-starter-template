/// Spacing

// Spacing > Padding
@each $i in 1, 2, 3, 4, 5, 6 {
  .sml-pad-#{$i} {
    padding: $gutter * ($i);
  }
}
@include respond-to(med) {
  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .med-pad-#{$i} {
      padding: $gutter * ($i);
    }
  }
}
@include respond-to(lrg) {
  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .lrg-pad-#{$i} {
      padding: $gutter * ($i);
    }
  }
}

// Spacing > Padding-X
// NOTE: Use anything except .*-pad-x1 very sparingly.
// X units beyonf 1 will not be aligned with the grid.
@each $i in 1, 2, 3, 4, 5, 6 {
  .sml-pad-x#{$i} {
    padding-left:  $gutter * ($i);
    padding-right: $gutter * ($i);
  }
}
@include respond-to(med) {
  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .med-pad-x#{$i} {
      padding-left:  $gutter * ($i);
      padding-right: $gutter * ($i);
    }
  }
}
@include respond-to(lrg) {
  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .lrg-pad-x#{$i} {
      padding-left:  $gutter * ($i);
      padding-right: $gutter * ($i);
    }
  }
}

// Spacing > Padding-Y
@each $i in 1, 2, 3, 4, 5, 6 {
  .sml-pad-y#{$i} {
    padding-top:    $gutter * ($i);
    padding-bottom: $gutter * ($i);
  }
}
@include respond-to(med) {
  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .med-pad-y#{$i} {
      padding-top:    $gutter * ($i);
      padding-bottom: $gutter * ($i);
    }
  }
}
@include respond-to(lrg) {
  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .lrg-pad-y#{$i} {
      padding-top:    $gutter * ($i);
      padding-bottom: $gutter * ($i);
    }
  }
}

// Spacing > Padding-Y-Top
@each $i in 1, 2, 3, 4, 5, 6 {
  .sml-pad-y-top#{$i} {
    padding-top:    $gutter * ($i);
  }
}
@include respond-to(med) {
  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .med-pad-y-top#{$i} {
      padding-top:    $gutter * ($i);
    }
  }
}
@include respond-to(lrg) {
  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .lrg-pad-y-top#{$i} {
      padding-top:    $gutter * ($i);
    }
  }
}

// Spacing > Margin
.sml-push-y-half {
  margin-top: $gutter/2;
}
@each $i in 1, 2, 3, 4, 5, 6 {
  .sml-push-y#{$i} {
    margin-top: $gutter * ($i);
  }
}
@include respond-to(med) {
  .med-push-y-half {
    margin-top: $gutter/2;
  }

  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .med-push-y#{$i} {
      margin-top: $gutter * ($i);
    }
  }
}
@include respond-to(lrg) {
  .lrg-push-y-half {
    margin-top: $gutter/2;
  }

  @each $i in 0, 1, 2, 3, 4, 5, 6 {
    .lrg-push-y#{$i} {
      margin-top: $gutter * ($i);
    }
  }
}
